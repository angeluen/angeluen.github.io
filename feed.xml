<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://angeluen.github.io/</id><title>EnRU</title><subtitle>C, C++, C#</subtitle> <updated>2021-12-15T10:58:14+09:00</updated> <author> <name>kimminjun</name> <uri>https://angeluen.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://angeluen.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://angeluen.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2021 kimminjun </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title></title><link href="https://angeluen.github.io/posts/2021-12-08-c-LinQ/" rel="alternate" type="text/html" title="" /><published>2021-12-15T10:58:14+09:00</published> <updated>2021-12-15T10:57:54+09:00</updated> <id>https://angeluen.github.io/posts/2021-12-08-c-LinQ/</id> <content src="https://angeluen.github.io/posts/2021-12-08-c-LinQ/" /> <author> <name>kimminjun</name> </author> <summary> 01. LinQ 란? Language-Intergrated Query 약자로 컬렉션 형태의 모든 데이터의 조건을 걸어 필터링을 할 수 있는 기능이다. 일반적으로는 쿼리문을 작성하나 C#에서는 다양한 편의성을 제공해준다. C#에서 대표적인 LinQ 사용법을 배워보자. 02. LinQ - 쿼리 다음과 같은 데이터가 있다고 생각해보자 int[] data = {75, 23, 32, 100, 54}; 정렬이 되어 있지 않고 원하는 데이터를 얻고 싶을다면 어떻게 해야할까? 만약 LinQ 를 안쓰고 40 이하의 값을 찾는다면 이렇게 할 수 있다. foreach(var index in score) { if(index &amp;lt;= 40) Console.Write(index + " ... </summary> </entry> <entry><title>C#-01 Dictionary</title><link href="https://angeluen.github.io/posts/c-dictionary/" rel="alternate" type="text/html" title="C#-01 Dictionary" /><published>2021-12-01T10:33:00+09:00</published> <updated>2021-12-02T21:47:01+09:00</updated> <id>https://angeluen.github.io/posts/c-dictionary/</id> <content src="https://angeluen.github.io/posts/c-dictionary/" /> <author> <name>EnRU</name> </author> <category term="C#" /> <category term="Dictionary" /> <summary> 01. Dictionary KeyValuePair 방식으로 Key 값을 이용해 Value를 가져오는 방식이다. 내부는 HashTable 구조로 구현되며 값을 검색하면 O(1)의 시간 복잡도로 검색 작업이 된다. 주어진 키를 HashCode(정수)로 바꾸고, 이를 적당한 알고리즘을 통해 HashKey로 바꾼다. Dictionary는 충돌을 해결하기 위해 Chaining(각 HashTable bucket에 항목 목록을 유지함)에 의존한다. Dictionary는 HashTable과는 다르게 자료형이 선언되어 있어 boxing 문제가 없다. 다만 자료형이 선언 되어 있는 문제때문에 모든 타입을 담을 수 없다. 단점 항목이 저장되는 순서가 항목을 추가하는 순서와는 다름. 정렬되지 않음. 정렬... </summary> </entry> </feed>
