[ { "title": "", "url": "/posts/2021-12-08-c-LinQ/", "categories": "", "tags": "", "date": "2021-12-15 10:58:14 +0900", "snippet": "01. LinQ 란?Language-Intergrated Query 약자로 컬렉션 형태의 모든 데이터의 조건을 걸어 필터링을 할 수 있는 기능이다. 일반적으로는 쿼리문을 작성하나 C#에서는 다양한 편의성을 제공해준다.C#에서 대표적인 LinQ 사용법을 배워보자.02. LinQ - 쿼리다음과 같은 데이터가 있다고 생각해보자int[] data = {75, 23, 32, 100, 54};정렬이 되어 있지 않고 원하는 데이터를 얻고 싶을다면 어떻게 해야할까? 만약 LinQ 를 안쓰고 40 이하의 값을 찾는다면 이렇게 할 수 있다.foreach(var index in score){ if(index &amp;lt;= 40) Console.Write(index + &quot; &quot;);}이러한 방식도 문제가 없지만 매번 조건을 걸어서 데이터를 추출하기에는 번거롭고 가독성도 떨어진다. 여기서 LinQ를 이용하다면 다음과 같이 변환이 가능하다.IEnumerable&amp;lt;int&amp;gt; result = from row in data where row &amp;lt;= 40 select row;foreach(var index in result){ Console.Write(index + &quot; &quot;);}이런식으로 쿼리를 작성해 원하는 조건의 데이터를 추출 할 수 있다.03. LinQ - Select, WhereC#에서는 편의성을 위해 Select 함수와 Where 함수를 제공한다. 두 함수는 람다식을 이용해 조건을 넣어준다.각 함수의 기능은 다음과 같다.Select절 - 컬렉션에서 각 요소를 원하는 시퀀스로 변환한다.Where절 - 컬렉션에서 결과를 제한하는 절. Where 조건에 맞는 요소만 결과 시퀀스에 출력된다.04. LinQ 장단점 정리장점 코드를 더 간결하게 정리할 수 있다. 유지보수가 쉽다. 자체적으로 데이터를 처리해 메모리 효율이 좋다.단점 남용할 경우 오히려 더 이해하기 어려운 코드가 만들어진다. 내부 실행으로 디버깅이 까다로워 질 수 있다. 경우에 따라 수동 코드보다 상당히 느릴 수 있다. 내부 구조를 더 잘 이해를 해야한다. 즉시 수행에 대해 조심 해야 한다. 몇몇 누적 연산자와 연산자들은 원본 시퀀스를 반복한다. 이러한 경우에는 LinQ의 장점인 메모리 효율이 저하 된다.참고 링크 : MS API 문서 - 1MS API 문서 - 2시프트님 블로그" }, { "title": "C#-01 Dictionary", "url": "/posts/c-dictionary/", "categories": "C#, Dictionary", "tags": "C#", "date": "2021-12-01 10:33:00 +0900", "snippet": "01. DictionaryKeyValuePair 방식으로 Key 값을 이용해 Value를 가져오는 방식이다.내부는 HashTable 구조로 구현되며 값을 검색하면 O(1)의 시간 복잡도로 검색 작업이 된다.주어진 키를 HashCode(정수)로 바꾸고, 이를 적당한 알고리즘을 통해 HashKey로 바꾼다.Dictionary는 충돌을 해결하기 위해 Chaining(각 HashTable bucket에 항목 목록을 유지함)에 의존한다.Dictionary는 HashTable과는 다르게 자료형이 선언되어 있어 boxing 문제가 없다. 다만 자료형이 선언 되어 있는 문제때문에 모든 타입을 담을 수 없다.단점 항목이 저장되는 순서가 항목을 추가하는 순서와는 다름. 정렬되지 않음. 정렬을 원하면 SortedDictionary(RB Tree)를 사용.주의사항 Dictionary는 유니크한 Key를 가져 야만 하여 동일한 Key를 Add 하는 경우에는 Error를 발생한다.이는 배열 참조 형식으로 데이터를 넣으면 수정 할 수 있다.또는 ContainsKey로 이미 데이터가 있는지 검사해서 넣어주면 된다._dictionary[key] = value참고 링크 : MS API 문서" } ]
